{"ast":null,"code":"import { useContext, useEffect, useRef, useState } from 'react';\nimport { GoogleApiContext } from './GoogleApiContext';\nexport function useGoogleApi(options = {}) {\n  const {\n    gapi,\n    configure\n  } = useContext(GoogleApiContext) ?? {};\n  const [configureState, setConfigureState] = useState();\n  const mounted = useRef(true);\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  });\n  const [, rerender] = useState();\n  const auth = gapi?.auth2?.getAuthInstance();\n  useEffect(() => {\n    if (auth) {\n      auth.isSignedIn.listen(() => mounted.current && rerender({}));\n      auth.currentUser.listen(() => mounted.current && rerender({}));\n    }\n  }, [auth]);\n  return configure ? configure(options, newState => mounted.current && newState !== configureState && setConfigureState(newState)) : undefined;\n}","map":{"version":3,"sources":["../../src/useGoogleApi.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,EAAqB,SAArB,EAAgC,MAAhC,EAAwC,QAAxC,QAAwD,OAAxD;AAEA,SAA2B,gBAA3B,QAAmD,oBAAnD;AAEA,OAAM,SAAU,YAAV,CAAuB,OAAA,GAA4B,EAAnD,EAAqD;AACvD,QAAM;AAAE,IAAA,IAAF;AAAQ,IAAA;AAAR,MAAsB,UAAU,CAAC,gBAAD,CAAV,IAAgC,EAA5D;AAEA,QAAM,CAAC,cAAD,EAAiB,iBAAjB,IAAsC,QAAQ,EAApD;AAEA,QAAM,OAAO,GAAG,MAAM,CAAU,IAAV,CAAtB;AACA,EAAA,SAAS,CAAC,MAAK;AACX,IAAA,OAAO,CAAC,OAAR,GAAkB,IAAlB;AACA,WAAO,MAAK;AAAG,MAAA,OAAO,CAAC,OAAR,GAAkB,KAAlB;AAAwB,KAAvC;AACH,GAHQ,CAAT;AAKA,QAAM,GAAG,QAAH,IAAe,QAAQ,EAA7B;AACA,QAAM,IAAI,GAAG,IAAI,EAAE,KAAN,EAAa,eAAb,EAAb;AACA,EAAA,SAAS,CAAC,MAAK;AACX,QAAI,IAAJ,EAAU;AACN,MAAA,IAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,MAAM,OAAO,CAAC,OAAR,IAAmB,QAAQ,CAAC,EAAD,CAAxD;AACA,MAAA,IAAI,CAAC,WAAL,CAAiB,MAAjB,CAAwB,MAAM,OAAO,CAAC,OAAR,IAAmB,QAAQ,CAAC,EAAD,CAAzD;AACH;AACJ,GALQ,EAKN,CAAC,IAAD,CALM,CAAT;AAOA,SAAO,SAAS,GACV,SAAS,CACP,OADO,EAEP,QAAQ,IAAI,OAAO,CAAC,OAAR,IAAmB,QAAQ,KAAK,cAAhC,IAAkD,iBAAiB,CAAC,QAAD,CAFxE,CADC,GAKV,SALN;AAMH","sourceRoot":"","sourcesContent":["import { useContext, useEffect, useRef, useState } from 'react';\nimport { GoogleApiContext } from './GoogleApiContext';\nexport function useGoogleApi(options = {}) {\n    const { gapi, configure } = useContext(GoogleApiContext) ?? {};\n    const [configureState, setConfigureState] = useState();\n    const mounted = useRef(true);\n    useEffect(() => {\n        mounted.current = true;\n        return () => { mounted.current = false; };\n    });\n    const [, rerender] = useState();\n    const auth = gapi?.auth2?.getAuthInstance();\n    useEffect(() => {\n        if (auth) {\n            auth.isSignedIn.listen(() => mounted.current && rerender({}));\n            auth.currentUser.listen(() => mounted.current && rerender({}));\n        }\n    }, [auth]);\n    return configure\n        ? configure(options, newState => mounted.current && newState !== configureState && setConfigureState(newState))\n        : undefined;\n}\n//# sourceMappingURL=useGoogleApi.js.map"]},"metadata":{},"sourceType":"module"}