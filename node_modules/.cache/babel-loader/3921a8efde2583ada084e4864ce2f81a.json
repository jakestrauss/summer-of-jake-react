{"ast":null,"code":"import React, { useMemo, useRef } from 'react';\nimport { useLibrary } from 'react-weblibrary';\nimport { GoogleApiContext } from './GoogleApiContext';\nexport function GoogleApiProvider({\n  clientId,\n  children\n}) {\n  const [gapi] = useLibrary('gapi', 'https://apis.google.com/js/api.js');\n  const requested = useRef({\n    modules: [],\n    discoveryDocs: [],\n    scopes: []\n  }).current;\n  const loading = useRef({\n    modules: [],\n    discoveryDocs: [],\n    scopes: []\n  }).current;\n  const done = useRef({\n    discoveryDocs: [],\n    scopes: []\n  }).current;\n\n  function configure(options, state) {\n    const modules = (options.modules ?? []).concat(options.discoveryDocs?.length ? ['client'] : [], options.scopes?.length ? ['auth2'] : []);\n\n    if (gapi) {\n      return doConfigure(gapi, clientId, requested, loading, done, { ...options,\n        modules\n      }, state);\n    }\n  }\n\n  const context = useMemo(() => ({\n    gapi\n  }), [gapi]);\n  context.configure = gapi ? configure : undefined;\n  return React.createElement(GoogleApiContext.Provider, {\n    value: context\n  }, children);\n}\n\nfunction doConfigure(gapi, clientId, requested, loading, done, options, state) {\n  return load(options, state);\n\n  function load(options, state) {\n    const {\n      modules = []\n    } = options;\n    const missingModules = modules.filter(k => !gapi[k]);\n\n    if (!missingModules.length) {\n      return init(options, state);\n    }\n\n    const loadModules = missingModules.filter(k => !loading.modules.includes(k));\n\n    if (loadModules.length) {\n      loading.modules.push(...loadModules);\n      gapi.load(missingModules.join(':'), () => {\n        loading.modules = loading.modules.filter(k => !missingModules.includes(k));\n        init(options, state);\n      });\n    }\n  }\n\n  function init(options, state) {\n    const {\n      scopes = [],\n      discoveryDocs = []\n    } = options;\n    const auth = gapi.auth2?.getAuthInstance();\n\n    const missingScopes = (() => {\n      if (!scopes.length || !auth) {\n        return scopes;\n      }\n\n      const grantedScopes = (auth.currentUser.get()?.getGrantedScopes() ?? '').split(' ');\n      return scopes.filter(k => !grantedScopes.includes(k));\n    })();\n\n    const missingDiscoveryDocs = discoveryDocs.filter(k => !done.discoveryDocs.includes(k));\n    const missingScopesNotDone = missingScopes.filter(k => !done.scopes.includes(k)); // collect missing scopes and discoveryDocs from different hook calls to reduce calls\n    // to auth2.init(), GoogleUser.grant() and client.init()\n\n    if (missingScopes.length) {\n      const requestScopes = missingScopes.filter(k => !requested.scopes.includes(k));\n      requested.scopes.push(...requestScopes); // prevent asking for the same scope multiple times\n\n      if (missingScopesNotDone.length) {\n        new Promise(() => doInitScopes(options, state));\n      }\n    }\n\n    if (missingDiscoveryDocs.length) {\n      const requestDiscoveryDocs = missingDiscoveryDocs.filter(k => !requested.discoveryDocs.includes(k));\n      requested.discoveryDocs.push(...requestDiscoveryDocs);\n      new Promise(() => doInitDiscoveryDocs(options, state));\n    }\n\n    if (!missingScopesNotDone.length && !missingDiscoveryDocs.length) {\n      state(JSON.stringify(options));\n      return gapi;\n    }\n  }\n\n  function doInitScopes(options, state) {\n    const loadScopes = requested.scopes.filter(k => !loading.scopes.includes(k));\n\n    if (loadScopes.length && gapi?.auth2) {\n      loading.scopes.push(...loadScopes);\n      const auth = gapi.auth2.getAuthInstance() ?? gapi.auth2.init({\n        client_id: clientId,\n        scope: loadScopes.join(' ')\n      });\n\n      if (!options.requestScopes) {\n        done.scopes.push(...loadScopes);\n        auth.then(() => init(options, state));\n        return;\n      }\n\n      auth.then(() => {\n        loading.scopes = loading.scopes.filter(k => !loadScopes.includes(k));\n        return auth.isSignedIn.get() ? auth.currentUser.get().grant({\n          scope: loadScopes.join(' ')\n        }) : auth.signIn({\n          scope: loadScopes.join(' ')\n        });\n      }).then(() => {\n        done.scopes.push(...loadScopes);\n        init(options, state);\n      }, ({\n        error\n      }) => {\n        done.scopes.push(...loadScopes);\n        console.error(`Failed to request scopes: \\n${loadScopes.join('\\n')}\\n\\nFailed with:\\n${error}`);\n      });\n    } else {\n      // some other hook call already triggered the auth request - wait for it\n      setTimeout(() => init(options, state), 100);\n    }\n  }\n\n  function doInitDiscoveryDocs(options, state) {\n    const loadDiscoveryDocs = requested.discoveryDocs.filter(k => !loading.discoveryDocs.includes(k));\n\n    if (loadDiscoveryDocs.length && gapi?.client) {\n      loading.discoveryDocs.push(...loadDiscoveryDocs);\n      gapi.client.init({\n        discoveryDocs: loadDiscoveryDocs\n      }).then(() => {\n        done.discoveryDocs.push(...loadDiscoveryDocs);\n        init(options, state);\n      }, ({\n        error\n      }) => console.error(`Failed to load resources: \\n${loadDiscoveryDocs.join('\\n')}\\n\\nFailed with:\\n${error}`)).then(() => {\n        loading.discoveryDocs = loading.discoveryDocs.filter(k => !loadDiscoveryDocs.includes(k));\n      });\n    } else {\n      // some other hook call already triggered the client.init() - wait for it\n      setTimeout(() => init(options, state), 100);\n    }\n  }\n}","map":{"version":3,"sources":["../../src/GoogleApiProvider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { useMemo, useRef } from 'react';\nimport { useLibrary } from 'react-weblibrary';\nimport { GoogleApiContext } from './GoogleApiContext';\nexport function GoogleApiProvider({ clientId, children }) {\n    const [gapi] = useLibrary('gapi', 'https://apis.google.com/js/api.js');\n    const requested = useRef({ modules: [], discoveryDocs: [], scopes: [] }).current;\n    const loading = useRef({ modules: [], discoveryDocs: [], scopes: [] }).current;\n    const done = useRef({ discoveryDocs: [], scopes: [] }).current;\n    function configure(options, state) {\n        const modules = (options.modules ?? []).concat(options.discoveryDocs?.length ? ['client'] : [], options.scopes?.length ? ['auth2'] : []);\n        if (gapi) {\n            return doConfigure(gapi, clientId, requested, loading, done, { ...options, modules }, state);\n        }\n    }\n    const context = useMemo(() => ({ gapi }), [gapi]);\n    context.configure = gapi ? configure : undefined;\n    return React.createElement(GoogleApiContext.Provider, { value: context }, children);\n}\nfunction doConfigure(gapi, clientId, requested, loading, done, options, state) {\n    return load(options, state);\n    function load(options, state) {\n        const { modules = [] } = options;\n        const missingModules = modules.filter(k => !gapi[k]);\n        if (!missingModules.length) {\n            return init(options, state);\n        }\n        const loadModules = missingModules.filter(k => !loading.modules.includes(k));\n        if (loadModules.length) {\n            loading.modules.push(...loadModules);\n            gapi.load(missingModules.join(':'), () => {\n                loading.modules = loading.modules.filter(k => !missingModules.includes(k));\n                init(options, state);\n            });\n        }\n    }\n    function init(options, state) {\n        const { scopes = [], discoveryDocs = [] } = options;\n        const auth = gapi.auth2?.getAuthInstance();\n        const missingScopes = (() => {\n            if (!scopes.length || !auth) {\n                return scopes;\n            }\n            const grantedScopes = (auth.currentUser.get()?.getGrantedScopes() ?? '').split(' ');\n            return scopes.filter(k => !grantedScopes.includes(k));\n        })();\n        const missingDiscoveryDocs = discoveryDocs.filter(k => !done.discoveryDocs.includes(k));\n        const missingScopesNotDone = missingScopes.filter(k => !done.scopes.includes(k));\n        // collect missing scopes and discoveryDocs from different hook calls to reduce calls\n        // to auth2.init(), GoogleUser.grant() and client.init()\n        if (missingScopes.length) {\n            const requestScopes = missingScopes.filter(k => !requested.scopes.includes(k));\n            requested.scopes.push(...requestScopes);\n            // prevent asking for the same scope multiple times\n            if (missingScopesNotDone.length) {\n                new Promise(() => doInitScopes(options, state));\n            }\n        }\n        if (missingDiscoveryDocs.length) {\n            const requestDiscoveryDocs = missingDiscoveryDocs.filter(k => !requested.discoveryDocs.includes(k));\n            requested.discoveryDocs.push(...requestDiscoveryDocs);\n            new Promise(() => doInitDiscoveryDocs(options, state));\n        }\n        if (!missingScopesNotDone.length && !missingDiscoveryDocs.length) {\n            state(JSON.stringify(options));\n            return gapi;\n        }\n    }\n    function doInitScopes(options, state) {\n        const loadScopes = requested.scopes.filter(k => !loading.scopes.includes(k));\n        if (loadScopes.length && gapi?.auth2) {\n            loading.scopes.push(...loadScopes);\n            const auth = gapi.auth2.getAuthInstance()\n                ?? gapi.auth2.init({\n                    client_id: clientId,\n                    scope: loadScopes.join(' '),\n                });\n            if (!options.requestScopes) {\n                done.scopes.push(...loadScopes);\n                auth.then(() => init(options, state));\n                return;\n            }\n            auth.then(() => {\n                loading.scopes = loading.scopes.filter(k => !loadScopes.includes(k));\n                return (auth.isSignedIn.get()\n                    ? auth.currentUser.get().grant({\n                        scope: loadScopes.join(' '),\n                    })\n                    : auth.signIn({\n                        scope: loadScopes.join(' '),\n                    }));\n            }).then(() => {\n                done.scopes.push(...loadScopes);\n                init(options, state);\n            }, ({ error }) => {\n                done.scopes.push(...loadScopes);\n                console.error(`Failed to request scopes: \\n${loadScopes.join('\\n')}\\n\\nFailed with:\\n${error}`);\n            });\n        }\n        else {\n            // some other hook call already triggered the auth request - wait for it\n            setTimeout(() => init(options, state), 100);\n        }\n    }\n    function doInitDiscoveryDocs(options, state) {\n        const loadDiscoveryDocs = requested.discoveryDocs.filter(k => !loading.discoveryDocs.includes(k));\n        if (loadDiscoveryDocs.length && gapi?.client) {\n            loading.discoveryDocs.push(...loadDiscoveryDocs);\n            gapi.client.init({\n                discoveryDocs: loadDiscoveryDocs,\n            }).then(() => {\n                done.discoveryDocs.push(...loadDiscoveryDocs);\n                init(options, state);\n            }, ({ error }) => console.error(`Failed to load resources: \\n${loadDiscoveryDocs.join('\\n')}\\n\\nFailed with:\\n${error}`)).then(() => {\n                loading.discoveryDocs = loading.discoveryDocs.filter(k => !loadDiscoveryDocs.includes(k));\n            });\n        }\n        else {\n            // some other hook call already triggered the client.init() - wait for it\n            setTimeout(() => init(options, state), 100);\n        }\n    }\n}\n//# sourceMappingURL=GoogleApiProvider.js.map"]},"metadata":{},"sourceType":"module"}