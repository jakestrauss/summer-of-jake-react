{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var LineMap, SourceMap;\n\n  LineMap = function () {\n    function LineMap(line1) {\n      this.line = line1;\n      this.columns = [];\n    }\n\n    LineMap.prototype.add = function (column, arg, options) {\n      var sourceColumn, sourceLine;\n      sourceLine = arg[0], sourceColumn = arg[1];\n\n      if (options == null) {\n        options = {};\n      }\n\n      if (this.columns[column] && options.noReplace) {\n        return;\n      }\n\n      return this.columns[column] = {\n        line: this.line,\n        column: column,\n        sourceLine: sourceLine,\n        sourceColumn: sourceColumn\n      };\n    };\n\n    LineMap.prototype.sourceLocation = function (column) {\n      var mapping;\n\n      while (!((mapping = this.columns[column]) || column <= 0)) {\n        column--;\n      }\n\n      return mapping && [mapping.sourceLine, mapping.sourceColumn];\n    };\n\n    return LineMap;\n  }();\n\n  SourceMap = function () {\n    var BASE64_CHARS, VLQ_CONTINUATION_BIT, VLQ_SHIFT, VLQ_VALUE_MASK;\n\n    function SourceMap() {\n      this.lines = [];\n    }\n\n    SourceMap.prototype.add = function (sourceLocation, generatedLocation, options) {\n      var base, column, line, lineMap;\n\n      if (options == null) {\n        options = {};\n      }\n\n      line = generatedLocation[0], column = generatedLocation[1];\n      lineMap = (base = this.lines)[line] || (base[line] = new LineMap(line));\n      return lineMap.add(column, sourceLocation, options);\n    };\n\n    SourceMap.prototype.sourceLocation = function (arg) {\n      var column, line, lineMap;\n      line = arg[0], column = arg[1];\n\n      while (!((lineMap = this.lines[line]) || line <= 0)) {\n        line--;\n      }\n\n      return lineMap && lineMap.sourceLocation(column);\n    };\n\n    SourceMap.prototype.generate = function (options, code) {\n      var buffer, i, j, lastColumn, lastSourceColumn, lastSourceLine, len, len1, lineMap, lineNumber, mapping, needComma, ref, ref1, v3, writingline;\n\n      if (options == null) {\n        options = {};\n      }\n\n      if (code == null) {\n        code = null;\n      }\n\n      writingline = 0;\n      lastColumn = 0;\n      lastSourceLine = 0;\n      lastSourceColumn = 0;\n      needComma = false;\n      buffer = \"\";\n      ref = this.lines;\n\n      for (lineNumber = i = 0, len = ref.length; i < len; lineNumber = ++i) {\n        lineMap = ref[lineNumber];\n\n        if (lineMap) {\n          ref1 = lineMap.columns;\n\n          for (j = 0, len1 = ref1.length; j < len1; j++) {\n            mapping = ref1[j];\n\n            if (!mapping) {\n              continue;\n            }\n\n            while (writingline < mapping.line) {\n              lastColumn = 0;\n              needComma = false;\n              buffer += \";\";\n              writingline++;\n            }\n\n            if (needComma) {\n              buffer += \",\";\n              needComma = false;\n            }\n\n            buffer += this.encodeVlq(mapping.column - lastColumn);\n            lastColumn = mapping.column;\n            buffer += this.encodeVlq(0);\n            buffer += this.encodeVlq(mapping.sourceLine - lastSourceLine);\n            lastSourceLine = mapping.sourceLine;\n            buffer += this.encodeVlq(mapping.sourceColumn - lastSourceColumn);\n            lastSourceColumn = mapping.sourceColumn;\n            needComma = true;\n          }\n        }\n      }\n\n      v3 = {\n        version: 3,\n        file: options.generatedFile || '',\n        sourceRoot: options.sourceRoot || '',\n        sources: options.sourceFiles || [''],\n        names: [],\n        mappings: buffer\n      };\n\n      if (options.inlineMap) {\n        v3.sourcesContent = [code];\n      }\n\n      return v3;\n    };\n\n    VLQ_SHIFT = 5;\n    VLQ_CONTINUATION_BIT = 1 << VLQ_SHIFT;\n    VLQ_VALUE_MASK = VLQ_CONTINUATION_BIT - 1;\n\n    SourceMap.prototype.encodeVlq = function (value) {\n      var answer, nextChunk, signBit, valueToEncode;\n      answer = '';\n      signBit = value < 0 ? 1 : 0;\n      valueToEncode = (Math.abs(value) << 1) + signBit;\n\n      while (valueToEncode || !answer) {\n        nextChunk = valueToEncode & VLQ_VALUE_MASK;\n        valueToEncode = valueToEncode >> VLQ_SHIFT;\n\n        if (valueToEncode) {\n          nextChunk |= VLQ_CONTINUATION_BIT;\n        }\n\n        answer += this.encodeBase64(nextChunk);\n      }\n\n      return answer;\n    };\n\n    BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    SourceMap.prototype.encodeBase64 = function (value) {\n      return BASE64_CHARS[value] || function () {\n        throw new Error(\"Cannot Base64 encode value: \" + value);\n      }();\n    };\n\n    return SourceMap;\n  }();\n\n  module.exports = SourceMap;\n}).call(this);","map":{"version":3,"sources":["/Users/straussj/Documents/react_projects/summer-of-jake/node_modules/coffee-script/lib/coffee-script/sourcemap.js"],"names":["LineMap","SourceMap","line1","line","columns","prototype","add","column","arg","options","sourceColumn","sourceLine","noReplace","sourceLocation","mapping","BASE64_CHARS","VLQ_CONTINUATION_BIT","VLQ_SHIFT","VLQ_VALUE_MASK","lines","generatedLocation","base","lineMap","generate","code","buffer","i","j","lastColumn","lastSourceColumn","lastSourceLine","len","len1","lineNumber","needComma","ref","ref1","v3","writingline","length","encodeVlq","version","file","generatedFile","sourceRoot","sources","sourceFiles","names","mappings","inlineMap","sourcesContent","value","answer","nextChunk","signBit","valueToEncode","Math","abs","encodeBase64","Error","module","exports","call"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.12.7\n(function() {\n  var LineMap, SourceMap;\n\n  LineMap = (function() {\n    function LineMap(line1) {\n      this.line = line1;\n      this.columns = [];\n    }\n\n    LineMap.prototype.add = function(column, arg, options) {\n      var sourceColumn, sourceLine;\n      sourceLine = arg[0], sourceColumn = arg[1];\n      if (options == null) {\n        options = {};\n      }\n      if (this.columns[column] && options.noReplace) {\n        return;\n      }\n      return this.columns[column] = {\n        line: this.line,\n        column: column,\n        sourceLine: sourceLine,\n        sourceColumn: sourceColumn\n      };\n    };\n\n    LineMap.prototype.sourceLocation = function(column) {\n      var mapping;\n      while (!((mapping = this.columns[column]) || (column <= 0))) {\n        column--;\n      }\n      return mapping && [mapping.sourceLine, mapping.sourceColumn];\n    };\n\n    return LineMap;\n\n  })();\n\n  SourceMap = (function() {\n    var BASE64_CHARS, VLQ_CONTINUATION_BIT, VLQ_SHIFT, VLQ_VALUE_MASK;\n\n    function SourceMap() {\n      this.lines = [];\n    }\n\n    SourceMap.prototype.add = function(sourceLocation, generatedLocation, options) {\n      var base, column, line, lineMap;\n      if (options == null) {\n        options = {};\n      }\n      line = generatedLocation[0], column = generatedLocation[1];\n      lineMap = ((base = this.lines)[line] || (base[line] = new LineMap(line)));\n      return lineMap.add(column, sourceLocation, options);\n    };\n\n    SourceMap.prototype.sourceLocation = function(arg) {\n      var column, line, lineMap;\n      line = arg[0], column = arg[1];\n      while (!((lineMap = this.lines[line]) || (line <= 0))) {\n        line--;\n      }\n      return lineMap && lineMap.sourceLocation(column);\n    };\n\n    SourceMap.prototype.generate = function(options, code) {\n      var buffer, i, j, lastColumn, lastSourceColumn, lastSourceLine, len, len1, lineMap, lineNumber, mapping, needComma, ref, ref1, v3, writingline;\n      if (options == null) {\n        options = {};\n      }\n      if (code == null) {\n        code = null;\n      }\n      writingline = 0;\n      lastColumn = 0;\n      lastSourceLine = 0;\n      lastSourceColumn = 0;\n      needComma = false;\n      buffer = \"\";\n      ref = this.lines;\n      for (lineNumber = i = 0, len = ref.length; i < len; lineNumber = ++i) {\n        lineMap = ref[lineNumber];\n        if (lineMap) {\n          ref1 = lineMap.columns;\n          for (j = 0, len1 = ref1.length; j < len1; j++) {\n            mapping = ref1[j];\n            if (!(mapping)) {\n              continue;\n            }\n            while (writingline < mapping.line) {\n              lastColumn = 0;\n              needComma = false;\n              buffer += \";\";\n              writingline++;\n            }\n            if (needComma) {\n              buffer += \",\";\n              needComma = false;\n            }\n            buffer += this.encodeVlq(mapping.column - lastColumn);\n            lastColumn = mapping.column;\n            buffer += this.encodeVlq(0);\n            buffer += this.encodeVlq(mapping.sourceLine - lastSourceLine);\n            lastSourceLine = mapping.sourceLine;\n            buffer += this.encodeVlq(mapping.sourceColumn - lastSourceColumn);\n            lastSourceColumn = mapping.sourceColumn;\n            needComma = true;\n          }\n        }\n      }\n      v3 = {\n        version: 3,\n        file: options.generatedFile || '',\n        sourceRoot: options.sourceRoot || '',\n        sources: options.sourceFiles || [''],\n        names: [],\n        mappings: buffer\n      };\n      if (options.inlineMap) {\n        v3.sourcesContent = [code];\n      }\n      return v3;\n    };\n\n    VLQ_SHIFT = 5;\n\n    VLQ_CONTINUATION_BIT = 1 << VLQ_SHIFT;\n\n    VLQ_VALUE_MASK = VLQ_CONTINUATION_BIT - 1;\n\n    SourceMap.prototype.encodeVlq = function(value) {\n      var answer, nextChunk, signBit, valueToEncode;\n      answer = '';\n      signBit = value < 0 ? 1 : 0;\n      valueToEncode = (Math.abs(value) << 1) + signBit;\n      while (valueToEncode || !answer) {\n        nextChunk = valueToEncode & VLQ_VALUE_MASK;\n        valueToEncode = valueToEncode >> VLQ_SHIFT;\n        if (valueToEncode) {\n          nextChunk |= VLQ_CONTINUATION_BIT;\n        }\n        answer += this.encodeBase64(nextChunk);\n      }\n      return answer;\n    };\n\n    BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    SourceMap.prototype.encodeBase64 = function(value) {\n      return BASE64_CHARS[value] || (function() {\n        throw new Error(\"Cannot Base64 encode value: \" + value);\n      })();\n    };\n\n    return SourceMap;\n\n  })();\n\n  module.exports = SourceMap;\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}