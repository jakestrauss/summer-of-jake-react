"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleApiProvider = void 0;
var react_1 = __importStar(require("react"));
var react_weblibrary_1 = require("react-weblibrary");
var GoogleApiContext_1 = require("./GoogleApiContext");
function GoogleApiProvider(_a) {
    var clientId = _a.clientId, children = _a.children;
    var gapi = (0, react_weblibrary_1.useLibrary)('gapi', 'https://apis.google.com/js/api.js')[0];
    var requested = (0, react_1.useRef)({ modules: [], discoveryDocs: [], scopes: [] }).current;
    var loading = (0, react_1.useRef)({ modules: [], discoveryDocs: [], scopes: [] }).current;
    var done = (0, react_1.useRef)({ discoveryDocs: [], scopes: [] }).current;
    function configure(options, state) {
        var _a, _b, _c;
        var modules = ((_a = options.modules) !== null && _a !== void 0 ? _a : []).concat(((_b = options.discoveryDocs) === null || _b === void 0 ? void 0 : _b.length) ? ['client'] : [], ((_c = options.scopes) === null || _c === void 0 ? void 0 : _c.length) ? ['auth2'] : []);
        if (gapi) {
            return doConfigure(gapi, clientId, requested, loading, done, __assign(__assign({}, options), { modules: modules }), state);
        }
    }
    var context = (0, react_1.useMemo)(function () { return ({ gapi: gapi }); }, [gapi]);
    context.configure = gapi ? configure : undefined;
    return react_1.default.createElement(GoogleApiContext_1.GoogleApiContext.Provider, { value: context }, children);
}
exports.GoogleApiProvider = GoogleApiProvider;
function doConfigure(gapi, clientId, requested, loading, done, options, state) {
    return load(options, state);
    function load(options, state) {
        var _a;
        var _b = options.modules, modules = _b === void 0 ? [] : _b;
        var missingModules = modules.filter(function (k) { return !gapi[k]; });
        if (!missingModules.length) {
            return init(options, state);
        }
        var loadModules = missingModules.filter(function (k) { return !loading.modules.includes(k); });
        if (loadModules.length) {
            (_a = loading.modules).push.apply(_a, loadModules);
            gapi.load(missingModules.join(':'), function () {
                loading.modules = loading.modules.filter(function (k) { return !missingModules.includes(k); });
                init(options, state);
            });
        }
    }
    function init(options, state) {
        var _a, _b;
        var _c;
        var _d = options.scopes, scopes = _d === void 0 ? [] : _d, _e = options.discoveryDocs, discoveryDocs = _e === void 0 ? [] : _e;
        var auth = (_c = gapi.auth2) === null || _c === void 0 ? void 0 : _c.getAuthInstance();
        var missingScopes = (function () {
            var _a, _b;
            if (!scopes.length || !auth) {
                return scopes;
            }
            var grantedScopes = ((_b = (_a = auth.currentUser.get()) === null || _a === void 0 ? void 0 : _a.getGrantedScopes()) !== null && _b !== void 0 ? _b : '').split(' ');
            return scopes.filter(function (k) { return !grantedScopes.includes(k); });
        })();
        var missingDiscoveryDocs = discoveryDocs.filter(function (k) { return !done.discoveryDocs.includes(k); });
        var missingScopesNotDone = missingScopes.filter(function (k) { return !done.scopes.includes(k); });
        // collect missing scopes and discoveryDocs from different hook calls to reduce calls
        // to auth2.init(), GoogleUser.grant() and client.init()
        if (missingScopes.length) {
            var requestScopes = missingScopes.filter(function (k) { return !requested.scopes.includes(k); });
            (_a = requested.scopes).push.apply(_a, requestScopes);
            // prevent asking for the same scope multiple times
            if (missingScopesNotDone.length) {
                new Promise(function () { return doInitScopes(options, state); });
            }
        }
        if (missingDiscoveryDocs.length) {
            var requestDiscoveryDocs = missingDiscoveryDocs.filter(function (k) { return !requested.discoveryDocs.includes(k); });
            (_b = requested.discoveryDocs).push.apply(_b, requestDiscoveryDocs);
            new Promise(function () { return doInitDiscoveryDocs(options, state); });
        }
        if (!missingScopesNotDone.length && !missingDiscoveryDocs.length) {
            state(JSON.stringify(options));
            return gapi;
        }
    }
    function doInitScopes(options, state) {
        var _a, _b;
        var _c;
        var loadScopes = requested.scopes.filter(function (k) { return !loading.scopes.includes(k); });
        if (loadScopes.length && (gapi === null || gapi === void 0 ? void 0 : gapi.auth2)) {
            (_a = loading.scopes).push.apply(_a, loadScopes);
            var auth_1 = (_c = gapi.auth2.getAuthInstance()) !== null && _c !== void 0 ? _c : gapi.auth2.init({
                client_id: clientId,
                scope: loadScopes.join(' '),
            });
            if (!options.requestScopes) {
                (_b = done.scopes).push.apply(_b, loadScopes);
                auth_1.then(function () { return init(options, state); });
                return;
            }
            auth_1.then(function () {
                loading.scopes = loading.scopes.filter(function (k) { return !loadScopes.includes(k); });
                return (auth_1.isSignedIn.get()
                    ? auth_1.currentUser.get().grant({
                        scope: loadScopes.join(' '),
                    })
                    : auth_1.signIn({
                        scope: loadScopes.join(' '),
                    }));
            }).then(function () {
                var _a;
                (_a = done.scopes).push.apply(_a, loadScopes);
                init(options, state);
            }, function (_a) {
                var _b;
                var error = _a.error;
                (_b = done.scopes).push.apply(_b, loadScopes);
                console.error("Failed to request scopes: \n" + loadScopes.join('\n') + "\n\nFailed with:\n" + error);
            });
        }
        else {
            // some other hook call already triggered the auth request - wait for it
            setTimeout(function () { return init(options, state); }, 100);
        }
    }
    function doInitDiscoveryDocs(options, state) {
        var _a;
        var loadDiscoveryDocs = requested.discoveryDocs.filter(function (k) { return !loading.discoveryDocs.includes(k); });
        if (loadDiscoveryDocs.length && (gapi === null || gapi === void 0 ? void 0 : gapi.client)) {
            (_a = loading.discoveryDocs).push.apply(_a, loadDiscoveryDocs);
            gapi.client.init({
                discoveryDocs: loadDiscoveryDocs,
            }).then(function () {
                var _a;
                (_a = done.discoveryDocs).push.apply(_a, loadDiscoveryDocs);
                init(options, state);
            }, function (_a) {
                var error = _a.error;
                return console.error("Failed to load resources: \n" + loadDiscoveryDocs.join('\n') + "\n\nFailed with:\n" + error);
            }).then(function () {
                loading.discoveryDocs = loading.discoveryDocs.filter(function (k) { return !loadDiscoveryDocs.includes(k); });
            });
        }
        else {
            // some other hook call already triggered the client.init() - wait for it
            setTimeout(function () { return init(options, state); }, 100);
        }
    }
}
//# sourceMappingURL=GoogleApiProvider.js.map